
11 8x8_LEDmatrix_with_stm32f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bb4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001cc0  08001cc0  00011cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cec  08001cec  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08001cec  08001cec  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cec  08001cec  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cec  08001cec  00011cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cf0  08001cf0  00011cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08001cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000014  08001d08  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001d08  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005854  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000134b  00000000  00000000  00025891  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000650  00000000  00000000  00026be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005a8  00000000  00000000  00027230  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001297d  00000000  00000000  000277d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000054b3  00000000  00000000  0003a155  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000662d4  00000000  00000000  0003f608  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a58dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001850  00000000  00000000  000a5958  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ca8 	.word	0x08001ca8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08001ca8 	.word	0x08001ca8

0800014c <select_column>:
/* USER CODE BEGIN 0 */

uint8_t row[8] = {0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11, 0x0E};

void select_column(int col)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

	GPIOB->ODR |= ((1 << 8) | (1 << 7) | (1 << 6) | (1 << 5) | (1 << 4) | (1 << 3) | (1 << 1) | (1 << 0));
 8000154:	4b2a      	ldr	r3, [pc, #168]	; (8000200 <select_column+0xb4>)
 8000156:	68db      	ldr	r3, [r3, #12]
 8000158:	4a29      	ldr	r2, [pc, #164]	; (8000200 <select_column+0xb4>)
 800015a:	f443 73fd 	orr.w	r3, r3, #506	; 0x1fa
 800015e:	f043 0301 	orr.w	r3, r3, #1
 8000162:	60d3      	str	r3, [r2, #12]
	if(col == 0)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b00      	cmp	r3, #0
 8000168:	d105      	bne.n	8000176 <select_column+0x2a>
	{
		GPIOB->ODR &= ~(1 << 8);
 800016a:	4b25      	ldr	r3, [pc, #148]	; (8000200 <select_column+0xb4>)
 800016c:	68db      	ldr	r3, [r3, #12]
 800016e:	4a24      	ldr	r2, [pc, #144]	; (8000200 <select_column+0xb4>)
 8000170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000174:	60d3      	str	r3, [r2, #12]
	}

	if(col == 1)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d105      	bne.n	8000188 <select_column+0x3c>
	{
		GPIOB->ODR &= ~(1 << 7);
 800017c:	4b20      	ldr	r3, [pc, #128]	; (8000200 <select_column+0xb4>)
 800017e:	68db      	ldr	r3, [r3, #12]
 8000180:	4a1f      	ldr	r2, [pc, #124]	; (8000200 <select_column+0xb4>)
 8000182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000186:	60d3      	str	r3, [r2, #12]
	}

	if(col == 2)
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	2b02      	cmp	r3, #2
 800018c:	d105      	bne.n	800019a <select_column+0x4e>
	{
		GPIOB->ODR &= ~(1 << 6);
 800018e:	4b1c      	ldr	r3, [pc, #112]	; (8000200 <select_column+0xb4>)
 8000190:	68db      	ldr	r3, [r3, #12]
 8000192:	4a1b      	ldr	r2, [pc, #108]	; (8000200 <select_column+0xb4>)
 8000194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000198:	60d3      	str	r3, [r2, #12]
	}

	if(col == 3)
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b03      	cmp	r3, #3
 800019e:	d105      	bne.n	80001ac <select_column+0x60>
	{
		GPIOB->ODR &= ~(1 << 5);
 80001a0:	4b17      	ldr	r3, [pc, #92]	; (8000200 <select_column+0xb4>)
 80001a2:	68db      	ldr	r3, [r3, #12]
 80001a4:	4a16      	ldr	r2, [pc, #88]	; (8000200 <select_column+0xb4>)
 80001a6:	f023 0320 	bic.w	r3, r3, #32
 80001aa:	60d3      	str	r3, [r2, #12]
	}

	if(col == 4)
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2b04      	cmp	r3, #4
 80001b0:	d105      	bne.n	80001be <select_column+0x72>
	{
		GPIOB->ODR &= ~(1 << 4);
 80001b2:	4b13      	ldr	r3, [pc, #76]	; (8000200 <select_column+0xb4>)
 80001b4:	68db      	ldr	r3, [r3, #12]
 80001b6:	4a12      	ldr	r2, [pc, #72]	; (8000200 <select_column+0xb4>)
 80001b8:	f023 0310 	bic.w	r3, r3, #16
 80001bc:	60d3      	str	r3, [r2, #12]
	}

	if(col == 5)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2b05      	cmp	r3, #5
 80001c2:	d105      	bne.n	80001d0 <select_column+0x84>
	{
		GPIOB->ODR &= ~(1 << 3);
 80001c4:	4b0e      	ldr	r3, [pc, #56]	; (8000200 <select_column+0xb4>)
 80001c6:	68db      	ldr	r3, [r3, #12]
 80001c8:	4a0d      	ldr	r2, [pc, #52]	; (8000200 <select_column+0xb4>)
 80001ca:	f023 0308 	bic.w	r3, r3, #8
 80001ce:	60d3      	str	r3, [r2, #12]
	}

	if(col == 6)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	2b06      	cmp	r3, #6
 80001d4:	d105      	bne.n	80001e2 <select_column+0x96>
	{
		GPIOB->ODR &= ~(1 << 1);
 80001d6:	4b0a      	ldr	r3, [pc, #40]	; (8000200 <select_column+0xb4>)
 80001d8:	68db      	ldr	r3, [r3, #12]
 80001da:	4a09      	ldr	r2, [pc, #36]	; (8000200 <select_column+0xb4>)
 80001dc:	f023 0302 	bic.w	r3, r3, #2
 80001e0:	60d3      	str	r3, [r2, #12]
	}

	if(col == 7)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	2b07      	cmp	r3, #7
 80001e6:	d105      	bne.n	80001f4 <select_column+0xa8>
	{
		GPIOB->ODR &= ~(1 << 0);
 80001e8:	4b05      	ldr	r3, [pc, #20]	; (8000200 <select_column+0xb4>)
 80001ea:	68db      	ldr	r3, [r3, #12]
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <select_column+0xb4>)
 80001ee:	f023 0301 	bic.w	r3, r3, #1
 80001f2:	60d3      	str	r3, [r2, #12]
	}

}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40010c00 	.word	0x40010c00

08000204 <set_data>:

void set_data(int x)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	GPIOA->ODR = row[x];
 800020c:	4a05      	ldr	r2, [pc, #20]	; (8000224 <set_data+0x20>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	4413      	add	r3, r2
 8000212:	781a      	ldrb	r2, [r3, #0]
 8000214:	4b04      	ldr	r3, [pc, #16]	; (8000228 <set_data+0x24>)
 8000216:	60da      	str	r2, [r3, #12]
}
 8000218:	bf00      	nop
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	bc80      	pop	{r7}
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	20000000 	.word	0x20000000
 8000228:	40010800 	.word	0x40010800

0800022c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000232:	f000 fa19 	bl	8000668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000236:	f000 f821 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023a:	f000 f88f 	bl	800035c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800023e:	f000 f863 	bl	8000308 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */



  GPIOB->ODR |= ((1<<0)|(1<<1)|(1<<3)|(1<<4)|(1<<5)|(1<<6)|(1<<7)|(1<<8));
 8000242:	4b0d      	ldr	r3, [pc, #52]	; (8000278 <main+0x4c>)
 8000244:	68db      	ldr	r3, [r3, #12]
 8000246:	4a0c      	ldr	r2, [pc, #48]	; (8000278 <main+0x4c>)
 8000248:	f443 73fd 	orr.w	r3, r3, #506	; 0x1fa
 800024c:	f043 0301 	orr.w	r3, r3, #1
 8000250:	60d3      	str	r3, [r2, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(int i=0; i<8; i++)
 8000252:	2300      	movs	r3, #0
 8000254:	607b      	str	r3, [r7, #4]
 8000256:	e00b      	b.n	8000270 <main+0x44>
	  {
		  set_data(i);
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	f7ff ffd3 	bl	8000204 <set_data>
		  select_column(i);
 800025e:	6878      	ldr	r0, [r7, #4]
 8000260:	f7ff ff74 	bl	800014c <select_column>
		  HAL_Delay(1);
 8000264:	2001      	movs	r0, #1
 8000266:	f000 fa61 	bl	800072c <HAL_Delay>
	  for(int i=0; i<8; i++)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	3301      	adds	r3, #1
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2b07      	cmp	r3, #7
 8000274:	ddf0      	ble.n	8000258 <main+0x2c>
 8000276:	e7ec      	b.n	8000252 <main+0x26>
 8000278:	40010c00 	.word	0x40010c00

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b090      	sub	sp, #64	; 0x40
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	2228      	movs	r2, #40	; 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fd04 	bl	8001c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800029e:	2301      	movs	r3, #1
 80002a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ac:	2301      	movs	r3, #1
 80002ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b0:	2302      	movs	r3, #2
 80002b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c0:	f107 0318 	add.w	r3, r7, #24
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 fd49 	bl	8000d5c <HAL_RCC_OscConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002d0:	f000 f8b0 	bl	8000434 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d4:	230f      	movs	r3, #15
 80002d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d8:	2302      	movs	r3, #2
 80002da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2102      	movs	r1, #2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 ffb4 	bl	800125c <HAL_RCC_ClockConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002fa:	f000 f89b 	bl	8000434 <Error_Handler>
  }
}
 80002fe:	bf00      	nop
 8000300:	3740      	adds	r7, #64	; 0x40
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
	...

08000308 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800030c:	4b11      	ldr	r3, [pc, #68]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 800030e:	4a12      	ldr	r2, [pc, #72]	; (8000358 <MX_USART1_UART_Init+0x50>)
 8000310:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000312:	4b10      	ldr	r3, [pc, #64]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 8000314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000318:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800031a:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 8000322:	2200      	movs	r2, #0
 8000324:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000326:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 8000328:	2200      	movs	r2, #0
 800032a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800032c:	4b09      	ldr	r3, [pc, #36]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 800032e:	220c      	movs	r2, #12
 8000330:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 8000334:	2200      	movs	r2, #0
 8000336:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 800033a:	2200      	movs	r2, #0
 800033c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800033e:	4805      	ldr	r0, [pc, #20]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 8000340:	f001 f928 	bl	8001594 <HAL_UART_Init>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800034a:	f000 f873 	bl	8000434 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000030 	.word	0x20000030
 8000358:	40013800 	.word	0x40013800

0800035c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b088      	sub	sp, #32
 8000360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	f107 0310 	add.w	r3, r7, #16
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000370:	4b2d      	ldr	r3, [pc, #180]	; (8000428 <MX_GPIO_Init+0xcc>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a2c      	ldr	r2, [pc, #176]	; (8000428 <MX_GPIO_Init+0xcc>)
 8000376:	f043 0310 	orr.w	r3, r3, #16
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b2a      	ldr	r3, [pc, #168]	; (8000428 <MX_GPIO_Init+0xcc>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0310 	and.w	r3, r3, #16
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000388:	4b27      	ldr	r3, [pc, #156]	; (8000428 <MX_GPIO_Init+0xcc>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a26      	ldr	r2, [pc, #152]	; (8000428 <MX_GPIO_Init+0xcc>)
 800038e:	f043 0320 	orr.w	r3, r3, #32
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b24      	ldr	r3, [pc, #144]	; (8000428 <MX_GPIO_Init+0xcc>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0320 	and.w	r3, r3, #32
 800039c:	60bb      	str	r3, [r7, #8]
 800039e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a0:	4b21      	ldr	r3, [pc, #132]	; (8000428 <MX_GPIO_Init+0xcc>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a20      	ldr	r2, [pc, #128]	; (8000428 <MX_GPIO_Init+0xcc>)
 80003a6:	f043 0304 	orr.w	r3, r3, #4
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b1e      	ldr	r3, [pc, #120]	; (8000428 <MX_GPIO_Init+0xcc>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0304 	and.w	r3, r3, #4
 80003b4:	607b      	str	r3, [r7, #4]
 80003b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b8:	4b1b      	ldr	r3, [pc, #108]	; (8000428 <MX_GPIO_Init+0xcc>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a1a      	ldr	r2, [pc, #104]	; (8000428 <MX_GPIO_Init+0xcc>)
 80003be:	f043 0308 	orr.w	r3, r3, #8
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b18      	ldr	r3, [pc, #96]	; (8000428 <MX_GPIO_Init+0xcc>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0308 	and.w	r3, r3, #8
 80003cc:	603b      	str	r3, [r7, #0]
 80003ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80003d0:	2200      	movs	r2, #0
 80003d2:	21ff      	movs	r1, #255	; 0xff
 80003d4:	4815      	ldr	r0, [pc, #84]	; (800042c <MX_GPIO_Init+0xd0>)
 80003d6:	f000 fca9 	bl	8000d2c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 80003da:	2200      	movs	r2, #0
 80003dc:	f240 11fb 	movw	r1, #507	; 0x1fb
 80003e0:	4813      	ldr	r0, [pc, #76]	; (8000430 <MX_GPIO_Init+0xd4>)
 80003e2:	f000 fca3 	bl	8000d2c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80003e6:	23ff      	movs	r3, #255	; 0xff
 80003e8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ea:	2301      	movs	r3, #1
 80003ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ee:	2300      	movs	r3, #0
 80003f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f2:	2302      	movs	r3, #2
 80003f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	4619      	mov	r1, r3
 80003fc:	480b      	ldr	r0, [pc, #44]	; (800042c <MX_GPIO_Init+0xd0>)
 80003fe:	f000 fb3b 	bl	8000a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4 
                           PB5 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 8000402:	f240 13fb 	movw	r3, #507	; 0x1fb
 8000406:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000408:	2301      	movs	r3, #1
 800040a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	2300      	movs	r3, #0
 800040e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000410:	2302      	movs	r3, #2
 8000412:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	4619      	mov	r1, r3
 800041a:	4805      	ldr	r0, [pc, #20]	; (8000430 <MX_GPIO_Init+0xd4>)
 800041c:	f000 fb2c 	bl	8000a78 <HAL_GPIO_Init>

}
 8000420:	bf00      	nop
 8000422:	3720      	adds	r7, #32
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40021000 	.word	0x40021000
 800042c:	40010800 	.word	0x40010800
 8000430:	40010c00 	.word	0x40010c00

08000434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000446:	4b15      	ldr	r3, [pc, #84]	; (800049c <HAL_MspInit+0x5c>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	4a14      	ldr	r2, [pc, #80]	; (800049c <HAL_MspInit+0x5c>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	6193      	str	r3, [r2, #24]
 8000452:	4b12      	ldr	r3, [pc, #72]	; (800049c <HAL_MspInit+0x5c>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	60bb      	str	r3, [r7, #8]
 800045c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <HAL_MspInit+0x5c>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	4a0e      	ldr	r2, [pc, #56]	; (800049c <HAL_MspInit+0x5c>)
 8000464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000468:	61d3      	str	r3, [r2, #28]
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <HAL_MspInit+0x5c>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000476:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <HAL_MspInit+0x60>)
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <HAL_MspInit+0x60>)
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000492:	bf00      	nop
 8000494:	3714      	adds	r7, #20
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010000 	.word	0x40010000

080004a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b088      	sub	sp, #32
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	605a      	str	r2, [r3, #4]
 80004b6:	609a      	str	r2, [r3, #8]
 80004b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a20      	ldr	r2, [pc, #128]	; (8000540 <HAL_UART_MspInit+0x9c>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d139      	bne.n	8000538 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004c4:	4b1f      	ldr	r3, [pc, #124]	; (8000544 <HAL_UART_MspInit+0xa0>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a1e      	ldr	r2, [pc, #120]	; (8000544 <HAL_UART_MspInit+0xa0>)
 80004ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <HAL_UART_MspInit+0xa0>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004dc:	4b19      	ldr	r3, [pc, #100]	; (8000544 <HAL_UART_MspInit+0xa0>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a18      	ldr	r2, [pc, #96]	; (8000544 <HAL_UART_MspInit+0xa0>)
 80004e2:	f043 0304 	orr.w	r3, r3, #4
 80004e6:	6193      	str	r3, [r2, #24]
 80004e8:	4b16      	ldr	r3, [pc, #88]	; (8000544 <HAL_UART_MspInit+0xa0>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f003 0304 	and.w	r3, r3, #4
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fa:	2302      	movs	r3, #2
 80004fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004fe:	2303      	movs	r3, #3
 8000500:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	4619      	mov	r1, r3
 8000508:	480f      	ldr	r0, [pc, #60]	; (8000548 <HAL_UART_MspInit+0xa4>)
 800050a:	f000 fab5 	bl	8000a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800050e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	4619      	mov	r1, r3
 8000522:	4809      	ldr	r0, [pc, #36]	; (8000548 <HAL_UART_MspInit+0xa4>)
 8000524:	f000 faa8 	bl	8000a78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000528:	2200      	movs	r2, #0
 800052a:	2100      	movs	r1, #0
 800052c:	2025      	movs	r0, #37	; 0x25
 800052e:	f000 f9f6 	bl	800091e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000532:	2025      	movs	r0, #37	; 0x25
 8000534:	f000 fa0f 	bl	8000956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000538:	bf00      	nop
 800053a:	3720      	adds	r7, #32
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40013800 	.word	0x40013800
 8000544:	40021000 	.word	0x40021000
 8000548:	40010800 	.word	0x40010800

0800054c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055c:	e7fe      	b.n	800055c <HardFault_Handler+0x4>

0800055e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <MemManage_Handler+0x4>

08000564 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <BusFault_Handler+0x4>

0800056a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <UsageFault_Handler+0x4>

08000570 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000598:	f000 f8ac 	bl	80006f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}

080005a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <USART1_IRQHandler+0x10>)
 80005a6:	f001 f843 	bl	8001630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000030 	.word	0x20000030

080005b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80005b8:	4b15      	ldr	r3, [pc, #84]	; (8000610 <SystemInit+0x5c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a14      	ldr	r2, [pc, #80]	; (8000610 <SystemInit+0x5c>)
 80005be:	f043 0301 	orr.w	r3, r3, #1
 80005c2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <SystemInit+0x5c>)
 80005c6:	685a      	ldr	r2, [r3, #4]
 80005c8:	4911      	ldr	r1, [pc, #68]	; (8000610 <SystemInit+0x5c>)
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <SystemInit+0x60>)
 80005cc:	4013      	ands	r3, r2
 80005ce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <SystemInit+0x5c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <SystemInit+0x5c>)
 80005d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005e0:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <SystemInit+0x5c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <SystemInit+0x5c>)
 80005e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <SystemInit+0x5c>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	4a07      	ldr	r2, [pc, #28]	; (8000610 <SystemInit+0x5c>)
 80005f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005f6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <SystemInit+0x5c>)
 80005fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <SystemInit+0x64>)
 8000602:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000606:	609a      	str	r2, [r3, #8]
#endif 
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	40021000 	.word	0x40021000
 8000614:	f8ff0000 	.word	0xf8ff0000
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800061c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800061e:	e003      	b.n	8000628 <LoopCopyDataInit>

08000620 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000622:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000624:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000626:	3104      	adds	r1, #4

08000628 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000628:	480a      	ldr	r0, [pc, #40]	; (8000654 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800062c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800062e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000630:	d3f6      	bcc.n	8000620 <CopyDataInit>
  ldr r2, =_sbss
 8000632:	4a0a      	ldr	r2, [pc, #40]	; (800065c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000634:	e002      	b.n	800063c <LoopFillZerobss>

08000636 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000638:	f842 3b04 	str.w	r3, [r2], #4

0800063c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800063e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000640:	d3f9      	bcc.n	8000636 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000642:	f7ff ffb7 	bl	80005b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000646:	f001 fb03 	bl	8001c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064a:	f7ff fdef 	bl	800022c <main>
  bx lr
 800064e:	4770      	bx	lr
  ldr r3, =_sidata
 8000650:	08001cf4 	.word	0x08001cf4
  ldr r0, =_sdata
 8000654:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000658:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 800065c:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8000660:	20000074 	.word	0x20000074

08000664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC1_2_IRQHandler>
	...

08000668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <HAL_Init+0x28>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a07      	ldr	r2, [pc, #28]	; (8000690 <HAL_Init+0x28>)
 8000672:	f043 0310 	orr.w	r3, r3, #16
 8000676:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000678:	2003      	movs	r0, #3
 800067a:	f000 f945 	bl	8000908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800067e:	2000      	movs	r0, #0
 8000680:	f000 f808 	bl	8000694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000684:	f7ff fedc 	bl	8000440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40022000 	.word	0x40022000

08000694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_InitTick+0x54>)
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_InitTick+0x58>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4619      	mov	r1, r3
 80006a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 f95d 	bl	8000972 <HAL_SYSTICK_Config>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006be:	2301      	movs	r3, #1
 80006c0:	e00e      	b.n	80006e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b0f      	cmp	r3, #15
 80006c6:	d80a      	bhi.n	80006de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c8:	2200      	movs	r2, #0
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	f04f 30ff 	mov.w	r0, #4294967295
 80006d0:	f000 f925 	bl	800091e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d4:	4a06      	ldr	r2, [pc, #24]	; (80006f0 <HAL_InitTick+0x5c>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006da:	2300      	movs	r3, #0
 80006dc:	e000      	b.n	80006e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006de:	2301      	movs	r3, #1
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000008 	.word	0x20000008
 80006ec:	20000010 	.word	0x20000010
 80006f0:	2000000c 	.word	0x2000000c

080006f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f8:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_IncTick+0x1c>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <HAL_IncTick+0x20>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4413      	add	r3, r2
 8000704:	4a03      	ldr	r2, [pc, #12]	; (8000714 <HAL_IncTick+0x20>)
 8000706:	6013      	str	r3, [r2, #0]
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	20000010 	.word	0x20000010
 8000714:	20000070 	.word	0x20000070

08000718 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  return uwTick;
 800071c:	4b02      	ldr	r3, [pc, #8]	; (8000728 <HAL_GetTick+0x10>)
 800071e:	681b      	ldr	r3, [r3, #0]
}
 8000720:	4618      	mov	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	20000070 	.word	0x20000070

0800072c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000734:	f7ff fff0 	bl	8000718 <HAL_GetTick>
 8000738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000744:	d005      	beq.n	8000752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_Delay+0x40>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	461a      	mov	r2, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	4413      	add	r3, r2
 8000750:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000752:	bf00      	nop
 8000754:	f7ff ffe0 	bl	8000718 <HAL_GetTick>
 8000758:	4602      	mov	r2, r0
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	429a      	cmp	r2, r3
 8000762:	d8f7      	bhi.n	8000754 <HAL_Delay+0x28>
  {
  }
}
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000010 	.word	0x20000010

08000770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800078c:	4013      	ands	r3, r2
 800078e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800079c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a2:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	60d3      	str	r3, [r2, #12]
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <__NVIC_GetPriorityGrouping+0x18>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	f003 0307 	and.w	r3, r3, #7
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db0b      	blt.n	80007fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	f003 021f 	and.w	r2, r3, #31
 80007ec:	4906      	ldr	r1, [pc, #24]	; (8000808 <__NVIC_EnableIRQ+0x34>)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	095b      	lsrs	r3, r3, #5
 80007f4:	2001      	movs	r0, #1
 80007f6:	fa00 f202 	lsl.w	r2, r0, r2
 80007fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	e000e100 	.word	0xe000e100

0800080c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	6039      	str	r1, [r7, #0]
 8000816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081c:	2b00      	cmp	r3, #0
 800081e:	db0a      	blt.n	8000836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	b2da      	uxtb	r2, r3
 8000824:	490c      	ldr	r1, [pc, #48]	; (8000858 <__NVIC_SetPriority+0x4c>)
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	0112      	lsls	r2, r2, #4
 800082c:	b2d2      	uxtb	r2, r2
 800082e:	440b      	add	r3, r1
 8000830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000834:	e00a      	b.n	800084c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4908      	ldr	r1, [pc, #32]	; (800085c <__NVIC_SetPriority+0x50>)
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	f003 030f 	and.w	r3, r3, #15
 8000842:	3b04      	subs	r3, #4
 8000844:	0112      	lsls	r2, r2, #4
 8000846:	b2d2      	uxtb	r2, r2
 8000848:	440b      	add	r3, r1
 800084a:	761a      	strb	r2, [r3, #24]
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000e100 	.word	0xe000e100
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000860:	b480      	push	{r7}
 8000862:	b089      	sub	sp, #36	; 0x24
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	f1c3 0307 	rsb	r3, r3, #7
 800087a:	2b04      	cmp	r3, #4
 800087c:	bf28      	it	cs
 800087e:	2304      	movcs	r3, #4
 8000880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3304      	adds	r3, #4
 8000886:	2b06      	cmp	r3, #6
 8000888:	d902      	bls.n	8000890 <NVIC_EncodePriority+0x30>
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	3b03      	subs	r3, #3
 800088e:	e000      	b.n	8000892 <NVIC_EncodePriority+0x32>
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000894:	f04f 32ff 	mov.w	r2, #4294967295
 8000898:	69bb      	ldr	r3, [r7, #24]
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43da      	mvns	r2, r3
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	401a      	ands	r2, r3
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	fa01 f303 	lsl.w	r3, r1, r3
 80008b2:	43d9      	mvns	r1, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b8:	4313      	orrs	r3, r2
         );
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3724      	adds	r7, #36	; 0x24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008d4:	d301      	bcc.n	80008da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00f      	b.n	80008fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008da:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <SysTick_Config+0x40>)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3b01      	subs	r3, #1
 80008e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008e2:	210f      	movs	r1, #15
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f7ff ff90 	bl	800080c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <SysTick_Config+0x40>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f2:	4b04      	ldr	r3, [pc, #16]	; (8000904 <SysTick_Config+0x40>)
 80008f4:	2207      	movs	r2, #7
 80008f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	e000e010 	.word	0xe000e010

08000908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f7ff ff2d 	bl	8000770 <__NVIC_SetPriorityGrouping>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	4603      	mov	r3, r0
 8000926:	60b9      	str	r1, [r7, #8]
 8000928:	607a      	str	r2, [r7, #4]
 800092a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000930:	f7ff ff42 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 8000934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	68b9      	ldr	r1, [r7, #8]
 800093a:	6978      	ldr	r0, [r7, #20]
 800093c:	f7ff ff90 	bl	8000860 <NVIC_EncodePriority>
 8000940:	4602      	mov	r2, r0
 8000942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000946:	4611      	mov	r1, r2
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff5f 	bl	800080c <__NVIC_SetPriority>
}
 800094e:	bf00      	nop
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	4603      	mov	r3, r0
 800095e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff35 	bl	80007d4 <__NVIC_EnableIRQ>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ffa2 	bl	80008c4 <SysTick_Config>
 8000980:	4603      	mov	r3, r0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d005      	beq.n	80009ae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2204      	movs	r2, #4
 80009a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	73fb      	strb	r3, [r7, #15]
 80009ac:	e051      	b.n	8000a52 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f022 020e 	bic.w	r2, r2, #14
 80009bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f022 0201 	bic.w	r2, r2, #1
 80009cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a22      	ldr	r2, [pc, #136]	; (8000a5c <HAL_DMA_Abort_IT+0xd0>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d029      	beq.n	8000a2c <HAL_DMA_Abort_IT+0xa0>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a20      	ldr	r2, [pc, #128]	; (8000a60 <HAL_DMA_Abort_IT+0xd4>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d022      	beq.n	8000a28 <HAL_DMA_Abort_IT+0x9c>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a1f      	ldr	r2, [pc, #124]	; (8000a64 <HAL_DMA_Abort_IT+0xd8>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d01a      	beq.n	8000a22 <HAL_DMA_Abort_IT+0x96>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a1d      	ldr	r2, [pc, #116]	; (8000a68 <HAL_DMA_Abort_IT+0xdc>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d012      	beq.n	8000a1c <HAL_DMA_Abort_IT+0x90>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <HAL_DMA_Abort_IT+0xe0>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d00a      	beq.n	8000a16 <HAL_DMA_Abort_IT+0x8a>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a1a      	ldr	r2, [pc, #104]	; (8000a70 <HAL_DMA_Abort_IT+0xe4>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d102      	bne.n	8000a10 <HAL_DMA_Abort_IT+0x84>
 8000a0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a0e:	e00e      	b.n	8000a2e <HAL_DMA_Abort_IT+0xa2>
 8000a10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a14:	e00b      	b.n	8000a2e <HAL_DMA_Abort_IT+0xa2>
 8000a16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a1a:	e008      	b.n	8000a2e <HAL_DMA_Abort_IT+0xa2>
 8000a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a20:	e005      	b.n	8000a2e <HAL_DMA_Abort_IT+0xa2>
 8000a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a26:	e002      	b.n	8000a2e <HAL_DMA_Abort_IT+0xa2>
 8000a28:	2310      	movs	r3, #16
 8000a2a:	e000      	b.n	8000a2e <HAL_DMA_Abort_IT+0xa2>
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	4a11      	ldr	r2, [pc, #68]	; (8000a74 <HAL_DMA_Abort_IT+0xe8>)
 8000a30:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2201      	movs	r2, #1
 8000a36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d003      	beq.n	8000a52 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	4798      	blx	r3
    } 
  }
  return status;
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40020008 	.word	0x40020008
 8000a60:	4002001c 	.word	0x4002001c
 8000a64:	40020030 	.word	0x40020030
 8000a68:	40020044 	.word	0x40020044
 8000a6c:	40020058 	.word	0x40020058
 8000a70:	4002006c 	.word	0x4002006c
 8000a74:	40020000 	.word	0x40020000

08000a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b08b      	sub	sp, #44	; 0x2c
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a8a:	e127      	b.n	8000cdc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	69fa      	ldr	r2, [r7, #28]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	f040 8116 	bne.w	8000cd6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	2b12      	cmp	r3, #18
 8000ab0:	d034      	beq.n	8000b1c <HAL_GPIO_Init+0xa4>
 8000ab2:	2b12      	cmp	r3, #18
 8000ab4:	d80d      	bhi.n	8000ad2 <HAL_GPIO_Init+0x5a>
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d02b      	beq.n	8000b12 <HAL_GPIO_Init+0x9a>
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d804      	bhi.n	8000ac8 <HAL_GPIO_Init+0x50>
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d031      	beq.n	8000b26 <HAL_GPIO_Init+0xae>
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d01c      	beq.n	8000b00 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ac6:	e048      	b.n	8000b5a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ac8:	2b03      	cmp	r3, #3
 8000aca:	d043      	beq.n	8000b54 <HAL_GPIO_Init+0xdc>
 8000acc:	2b11      	cmp	r3, #17
 8000ace:	d01b      	beq.n	8000b08 <HAL_GPIO_Init+0x90>
          break;
 8000ad0:	e043      	b.n	8000b5a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ad2:	4a89      	ldr	r2, [pc, #548]	; (8000cf8 <HAL_GPIO_Init+0x280>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d026      	beq.n	8000b26 <HAL_GPIO_Init+0xae>
 8000ad8:	4a87      	ldr	r2, [pc, #540]	; (8000cf8 <HAL_GPIO_Init+0x280>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d806      	bhi.n	8000aec <HAL_GPIO_Init+0x74>
 8000ade:	4a87      	ldr	r2, [pc, #540]	; (8000cfc <HAL_GPIO_Init+0x284>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d020      	beq.n	8000b26 <HAL_GPIO_Init+0xae>
 8000ae4:	4a86      	ldr	r2, [pc, #536]	; (8000d00 <HAL_GPIO_Init+0x288>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d01d      	beq.n	8000b26 <HAL_GPIO_Init+0xae>
          break;
 8000aea:	e036      	b.n	8000b5a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000aec:	4a85      	ldr	r2, [pc, #532]	; (8000d04 <HAL_GPIO_Init+0x28c>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d019      	beq.n	8000b26 <HAL_GPIO_Init+0xae>
 8000af2:	4a85      	ldr	r2, [pc, #532]	; (8000d08 <HAL_GPIO_Init+0x290>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d016      	beq.n	8000b26 <HAL_GPIO_Init+0xae>
 8000af8:	4a84      	ldr	r2, [pc, #528]	; (8000d0c <HAL_GPIO_Init+0x294>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d013      	beq.n	8000b26 <HAL_GPIO_Init+0xae>
          break;
 8000afe:	e02c      	b.n	8000b5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	623b      	str	r3, [r7, #32]
          break;
 8000b06:	e028      	b.n	8000b5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	623b      	str	r3, [r7, #32]
          break;
 8000b10:	e023      	b.n	8000b5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	3308      	adds	r3, #8
 8000b18:	623b      	str	r3, [r7, #32]
          break;
 8000b1a:	e01e      	b.n	8000b5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	330c      	adds	r3, #12
 8000b22:	623b      	str	r3, [r7, #32]
          break;
 8000b24:	e019      	b.n	8000b5a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d102      	bne.n	8000b34 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	623b      	str	r3, [r7, #32]
          break;
 8000b32:	e012      	b.n	8000b5a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d105      	bne.n	8000b48 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	69fa      	ldr	r2, [r7, #28]
 8000b44:	611a      	str	r2, [r3, #16]
          break;
 8000b46:	e008      	b.n	8000b5a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b48:	2308      	movs	r3, #8
 8000b4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	69fa      	ldr	r2, [r7, #28]
 8000b50:	615a      	str	r2, [r3, #20]
          break;
 8000b52:	e002      	b.n	8000b5a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
          break;
 8000b58:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	2bff      	cmp	r3, #255	; 0xff
 8000b5e:	d801      	bhi.n	8000b64 <HAL_GPIO_Init+0xec>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	e001      	b.n	8000b68 <HAL_GPIO_Init+0xf0>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3304      	adds	r3, #4
 8000b68:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	2bff      	cmp	r3, #255	; 0xff
 8000b6e:	d802      	bhi.n	8000b76 <HAL_GPIO_Init+0xfe>
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	e002      	b.n	8000b7c <HAL_GPIO_Init+0x104>
 8000b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b78:	3b08      	subs	r3, #8
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	210f      	movs	r1, #15
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	6a39      	ldr	r1, [r7, #32]
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	431a      	orrs	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	f000 8096 	beq.w	8000cd6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000baa:	4b59      	ldr	r3, [pc, #356]	; (8000d10 <HAL_GPIO_Init+0x298>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	4a58      	ldr	r2, [pc, #352]	; (8000d10 <HAL_GPIO_Init+0x298>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6193      	str	r3, [r2, #24]
 8000bb6:	4b56      	ldr	r3, [pc, #344]	; (8000d10 <HAL_GPIO_Init+0x298>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bc2:	4a54      	ldr	r2, [pc, #336]	; (8000d14 <HAL_GPIO_Init+0x29c>)
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	089b      	lsrs	r3, r3, #2
 8000bc8:	3302      	adds	r3, #2
 8000bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bce:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd2:	f003 0303 	and.w	r3, r3, #3
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	220f      	movs	r2, #15
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	4013      	ands	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a4b      	ldr	r2, [pc, #300]	; (8000d18 <HAL_GPIO_Init+0x2a0>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d013      	beq.n	8000c16 <HAL_GPIO_Init+0x19e>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a4a      	ldr	r2, [pc, #296]	; (8000d1c <HAL_GPIO_Init+0x2a4>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d00d      	beq.n	8000c12 <HAL_GPIO_Init+0x19a>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a49      	ldr	r2, [pc, #292]	; (8000d20 <HAL_GPIO_Init+0x2a8>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d007      	beq.n	8000c0e <HAL_GPIO_Init+0x196>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a48      	ldr	r2, [pc, #288]	; (8000d24 <HAL_GPIO_Init+0x2ac>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d101      	bne.n	8000c0a <HAL_GPIO_Init+0x192>
 8000c06:	2303      	movs	r3, #3
 8000c08:	e006      	b.n	8000c18 <HAL_GPIO_Init+0x1a0>
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	e004      	b.n	8000c18 <HAL_GPIO_Init+0x1a0>
 8000c0e:	2302      	movs	r3, #2
 8000c10:	e002      	b.n	8000c18 <HAL_GPIO_Init+0x1a0>
 8000c12:	2301      	movs	r3, #1
 8000c14:	e000      	b.n	8000c18 <HAL_GPIO_Init+0x1a0>
 8000c16:	2300      	movs	r3, #0
 8000c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c1a:	f002 0203 	and.w	r2, r2, #3
 8000c1e:	0092      	lsls	r2, r2, #2
 8000c20:	4093      	lsls	r3, r2
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c28:	493a      	ldr	r1, [pc, #232]	; (8000d14 <HAL_GPIO_Init+0x29c>)
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	089b      	lsrs	r3, r3, #2
 8000c2e:	3302      	adds	r3, #2
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d006      	beq.n	8000c50 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c42:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	4938      	ldr	r1, [pc, #224]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	600b      	str	r3, [r1, #0]
 8000c4e:	e006      	b.n	8000c5e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c50:	4b35      	ldr	r3, [pc, #212]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	43db      	mvns	r3, r3
 8000c58:	4933      	ldr	r1, [pc, #204]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d006      	beq.n	8000c78 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c6a:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	492e      	ldr	r1, [pc, #184]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	604b      	str	r3, [r1, #4]
 8000c76:	e006      	b.n	8000c86 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c78:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000c7a:	685a      	ldr	r2, [r3, #4]
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	4929      	ldr	r1, [pc, #164]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000c82:	4013      	ands	r3, r2
 8000c84:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d006      	beq.n	8000ca0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c92:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	4924      	ldr	r1, [pc, #144]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	608b      	str	r3, [r1, #8]
 8000c9e:	e006      	b.n	8000cae <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ca0:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000ca2:	689a      	ldr	r2, [r3, #8]
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	491f      	ldr	r1, [pc, #124]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000caa:	4013      	ands	r3, r2
 8000cac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d006      	beq.n	8000cc8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cba:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000cbc:	68da      	ldr	r2, [r3, #12]
 8000cbe:	491a      	ldr	r1, [pc, #104]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	60cb      	str	r3, [r1, #12]
 8000cc6:	e006      	b.n	8000cd6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000cca:	68da      	ldr	r2, [r3, #12]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	4915      	ldr	r1, [pc, #84]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	3301      	adds	r3, #1
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f47f aed0 	bne.w	8000a8c <HAL_GPIO_Init+0x14>
  }
}
 8000cec:	bf00      	nop
 8000cee:	372c      	adds	r7, #44	; 0x2c
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	10210000 	.word	0x10210000
 8000cfc:	10110000 	.word	0x10110000
 8000d00:	10120000 	.word	0x10120000
 8000d04:	10310000 	.word	0x10310000
 8000d08:	10320000 	.word	0x10320000
 8000d0c:	10220000 	.word	0x10220000
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40010000 	.word	0x40010000
 8000d18:	40010800 	.word	0x40010800
 8000d1c:	40010c00 	.word	0x40010c00
 8000d20:	40011000 	.word	0x40011000
 8000d24:	40011400 	.word	0x40011400
 8000d28:	40010400 	.word	0x40010400

08000d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	807b      	strh	r3, [r7, #2]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d3c:	787b      	ldrb	r3, [r7, #1]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d42:	887a      	ldrh	r2, [r7, #2]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d48:	e003      	b.n	8000d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d4a:	887b      	ldrh	r3, [r7, #2]
 8000d4c:	041a      	lsls	r2, r3, #16
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	611a      	str	r2, [r3, #16]
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d101      	bne.n	8000d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e26c      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 8087 	beq.w	8000e8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d7c:	4b92      	ldr	r3, [pc, #584]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 030c 	and.w	r3, r3, #12
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d00c      	beq.n	8000da2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d88:	4b8f      	ldr	r3, [pc, #572]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 030c 	and.w	r3, r3, #12
 8000d90:	2b08      	cmp	r3, #8
 8000d92:	d112      	bne.n	8000dba <HAL_RCC_OscConfig+0x5e>
 8000d94:	4b8c      	ldr	r3, [pc, #560]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da0:	d10b      	bne.n	8000dba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da2:	4b89      	ldr	r3, [pc, #548]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d06c      	beq.n	8000e88 <HAL_RCC_OscConfig+0x12c>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d168      	bne.n	8000e88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e246      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc2:	d106      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x76>
 8000dc4:	4b80      	ldr	r3, [pc, #512]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a7f      	ldr	r2, [pc, #508]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	e02e      	b.n	8000e30 <HAL_RCC_OscConfig+0xd4>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10c      	bne.n	8000df4 <HAL_RCC_OscConfig+0x98>
 8000dda:	4b7b      	ldr	r3, [pc, #492]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a7a      	ldr	r2, [pc, #488]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	4b78      	ldr	r3, [pc, #480]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a77      	ldr	r2, [pc, #476]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	e01d      	b.n	8000e30 <HAL_RCC_OscConfig+0xd4>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dfc:	d10c      	bne.n	8000e18 <HAL_RCC_OscConfig+0xbc>
 8000dfe:	4b72      	ldr	r3, [pc, #456]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a71      	ldr	r2, [pc, #452]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	4b6f      	ldr	r3, [pc, #444]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a6e      	ldr	r2, [pc, #440]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	e00b      	b.n	8000e30 <HAL_RCC_OscConfig+0xd4>
 8000e18:	4b6b      	ldr	r3, [pc, #428]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a6a      	ldr	r2, [pc, #424]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	4b68      	ldr	r3, [pc, #416]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a67      	ldr	r2, [pc, #412]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d013      	beq.n	8000e60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e38:	f7ff fc6e 	bl	8000718 <HAL_GetTick>
 8000e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3e:	e008      	b.n	8000e52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e40:	f7ff fc6a 	bl	8000718 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	2b64      	cmp	r3, #100	; 0x64
 8000e4c:	d901      	bls.n	8000e52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e1fa      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e52:	4b5d      	ldr	r3, [pc, #372]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0f0      	beq.n	8000e40 <HAL_RCC_OscConfig+0xe4>
 8000e5e:	e014      	b.n	8000e8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e60:	f7ff fc5a 	bl	8000718 <HAL_GetTick>
 8000e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e66:	e008      	b.n	8000e7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e68:	f7ff fc56 	bl	8000718 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b64      	cmp	r3, #100	; 0x64
 8000e74:	d901      	bls.n	8000e7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e1e6      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e7a:	4b53      	ldr	r3, [pc, #332]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1f0      	bne.n	8000e68 <HAL_RCC_OscConfig+0x10c>
 8000e86:	e000      	b.n	8000e8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d063      	beq.n	8000f5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e96:	4b4c      	ldr	r3, [pc, #304]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d00b      	beq.n	8000eba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ea2:	4b49      	ldr	r3, [pc, #292]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 030c 	and.w	r3, r3, #12
 8000eaa:	2b08      	cmp	r3, #8
 8000eac:	d11c      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x18c>
 8000eae:	4b46      	ldr	r3, [pc, #280]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d116      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eba:	4b43      	ldr	r3, [pc, #268]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d005      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x176>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	691b      	ldr	r3, [r3, #16]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d001      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e1ba      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed2:	4b3d      	ldr	r3, [pc, #244]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	4939      	ldr	r1, [pc, #228]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ee6:	e03a      	b.n	8000f5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d020      	beq.n	8000f32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ef0:	4b36      	ldr	r3, [pc, #216]	; (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef6:	f7ff fc0f 	bl	8000718 <HAL_GetTick>
 8000efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000efc:	e008      	b.n	8000f10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000efe:	f7ff fc0b 	bl	8000718 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d901      	bls.n	8000f10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e19b      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f10:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0f0      	beq.n	8000efe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	4927      	ldr	r1, [pc, #156]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	600b      	str	r3, [r1, #0]
 8000f30:	e015      	b.n	8000f5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f38:	f7ff fbee 	bl	8000718 <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f40:	f7ff fbea 	bl	8000718 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e17a      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f52:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f0      	bne.n	8000f40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d03a      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d019      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <HAL_RCC_OscConfig+0x274>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f78:	f7ff fbce 	bl	8000718 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f80:	f7ff fbca 	bl	8000718 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e15a      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0f0      	beq.n	8000f80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f000 fada 	bl	8001558 <RCC_Delay>
 8000fa4:	e01c      	b.n	8000fe0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_RCC_OscConfig+0x274>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fac:	f7ff fbb4 	bl	8000718 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fb2:	e00f      	b.n	8000fd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb4:	f7ff fbb0 	bl	8000718 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d908      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e140      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	42420000 	.word	0x42420000
 8000fd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd4:	4b9e      	ldr	r3, [pc, #632]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1e9      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 80a6 	beq.w	800113a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ff2:	4b97      	ldr	r3, [pc, #604]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10d      	bne.n	800101a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b94      	ldr	r3, [pc, #592]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4a93      	ldr	r2, [pc, #588]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001008:	61d3      	str	r3, [r2, #28]
 800100a:	4b91      	ldr	r3, [pc, #580]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001016:	2301      	movs	r3, #1
 8001018:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800101a:	4b8e      	ldr	r3, [pc, #568]	; (8001254 <HAL_RCC_OscConfig+0x4f8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001022:	2b00      	cmp	r3, #0
 8001024:	d118      	bne.n	8001058 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001026:	4b8b      	ldr	r3, [pc, #556]	; (8001254 <HAL_RCC_OscConfig+0x4f8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a8a      	ldr	r2, [pc, #552]	; (8001254 <HAL_RCC_OscConfig+0x4f8>)
 800102c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001032:	f7ff fb71 	bl	8000718 <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800103a:	f7ff fb6d 	bl	8000718 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b64      	cmp	r3, #100	; 0x64
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e0fd      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800104c:	4b81      	ldr	r3, [pc, #516]	; (8001254 <HAL_RCC_OscConfig+0x4f8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f0      	beq.n	800103a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d106      	bne.n	800106e <HAL_RCC_OscConfig+0x312>
 8001060:	4b7b      	ldr	r3, [pc, #492]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	4a7a      	ldr	r2, [pc, #488]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6213      	str	r3, [r2, #32]
 800106c:	e02d      	b.n	80010ca <HAL_RCC_OscConfig+0x36e>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10c      	bne.n	8001090 <HAL_RCC_OscConfig+0x334>
 8001076:	4b76      	ldr	r3, [pc, #472]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	4a75      	ldr	r2, [pc, #468]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 800107c:	f023 0301 	bic.w	r3, r3, #1
 8001080:	6213      	str	r3, [r2, #32]
 8001082:	4b73      	ldr	r3, [pc, #460]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4a72      	ldr	r2, [pc, #456]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001088:	f023 0304 	bic.w	r3, r3, #4
 800108c:	6213      	str	r3, [r2, #32]
 800108e:	e01c      	b.n	80010ca <HAL_RCC_OscConfig+0x36e>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	2b05      	cmp	r3, #5
 8001096:	d10c      	bne.n	80010b2 <HAL_RCC_OscConfig+0x356>
 8001098:	4b6d      	ldr	r3, [pc, #436]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	4a6c      	ldr	r2, [pc, #432]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	6213      	str	r3, [r2, #32]
 80010a4:	4b6a      	ldr	r3, [pc, #424]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	4a69      	ldr	r2, [pc, #420]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6213      	str	r3, [r2, #32]
 80010b0:	e00b      	b.n	80010ca <HAL_RCC_OscConfig+0x36e>
 80010b2:	4b67      	ldr	r3, [pc, #412]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	4a66      	ldr	r2, [pc, #408]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 80010b8:	f023 0301 	bic.w	r3, r3, #1
 80010bc:	6213      	str	r3, [r2, #32]
 80010be:	4b64      	ldr	r3, [pc, #400]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	4a63      	ldr	r2, [pc, #396]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 80010c4:	f023 0304 	bic.w	r3, r3, #4
 80010c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d015      	beq.n	80010fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d2:	f7ff fb21 	bl	8000718 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d8:	e00a      	b.n	80010f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010da:	f7ff fb1d 	bl	8000718 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e0ab      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f0:	4b57      	ldr	r3, [pc, #348]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0ee      	beq.n	80010da <HAL_RCC_OscConfig+0x37e>
 80010fc:	e014      	b.n	8001128 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fe:	f7ff fb0b 	bl	8000718 <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001104:	e00a      	b.n	800111c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001106:	f7ff fb07 	bl	8000718 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	f241 3288 	movw	r2, #5000	; 0x1388
 8001114:	4293      	cmp	r3, r2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e095      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800111c:	4b4c      	ldr	r3, [pc, #304]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1ee      	bne.n	8001106 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d105      	bne.n	800113a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800112e:	4b48      	ldr	r3, [pc, #288]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	4a47      	ldr	r2, [pc, #284]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001138:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 8081 	beq.w	8001246 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001144:	4b42      	ldr	r3, [pc, #264]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 030c 	and.w	r3, r3, #12
 800114c:	2b08      	cmp	r3, #8
 800114e:	d061      	beq.n	8001214 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d146      	bne.n	80011e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001158:	4b3f      	ldr	r3, [pc, #252]	; (8001258 <HAL_RCC_OscConfig+0x4fc>)
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115e:	f7ff fadb 	bl	8000718 <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001164:	e008      	b.n	8001178 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001166:	f7ff fad7 	bl	8000718 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e067      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001178:	4b35      	ldr	r3, [pc, #212]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1f0      	bne.n	8001166 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800118c:	d108      	bne.n	80011a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800118e:	4b30      	ldr	r3, [pc, #192]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	492d      	ldr	r1, [pc, #180]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 800119c:	4313      	orrs	r3, r2
 800119e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011a0:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a19      	ldr	r1, [r3, #32]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b0:	430b      	orrs	r3, r1
 80011b2:	4927      	ldr	r1, [pc, #156]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011b8:	4b27      	ldr	r3, [pc, #156]	; (8001258 <HAL_RCC_OscConfig+0x4fc>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff faab 	bl	8000718 <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c6:	f7ff faa7 	bl	8000718 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e037      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f0      	beq.n	80011c6 <HAL_RCC_OscConfig+0x46a>
 80011e4:	e02f      	b.n	8001246 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <HAL_RCC_OscConfig+0x4fc>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fa94 	bl	8000718 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f4:	f7ff fa90 	bl	8000718 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e020      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f0      	bne.n	80011f4 <HAL_RCC_OscConfig+0x498>
 8001212:	e018      	b.n	8001246 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69db      	ldr	r3, [r3, #28]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d101      	bne.n	8001220 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e013      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	429a      	cmp	r2, r3
 8001232:	d106      	bne.n	8001242 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800123e:	429a      	cmp	r2, r3
 8001240:	d001      	beq.n	8001246 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40021000 	.word	0x40021000
 8001254:	40007000 	.word	0x40007000
 8001258:	42420060 	.word	0x42420060

0800125c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e0d0      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001270:	4b6a      	ldr	r3, [pc, #424]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d910      	bls.n	80012a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127e:	4b67      	ldr	r3, [pc, #412]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 0207 	bic.w	r2, r3, #7
 8001286:	4965      	ldr	r1, [pc, #404]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	4313      	orrs	r3, r2
 800128c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800128e:	4b63      	ldr	r3, [pc, #396]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	d001      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e0b8      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d020      	beq.n	80012ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012b8:	4b59      	ldr	r3, [pc, #356]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	4a58      	ldr	r2, [pc, #352]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012d0:	4b53      	ldr	r3, [pc, #332]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	4a52      	ldr	r2, [pc, #328]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012dc:	4b50      	ldr	r3, [pc, #320]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	494d      	ldr	r1, [pc, #308]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d040      	beq.n	800137c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d107      	bne.n	8001312 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	4b47      	ldr	r3, [pc, #284]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d115      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e07f      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d107      	bne.n	800132a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131a:	4b41      	ldr	r3, [pc, #260]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e073      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e06b      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800133a:	4b39      	ldr	r3, [pc, #228]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f023 0203 	bic.w	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4936      	ldr	r1, [pc, #216]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800134c:	f7ff f9e4 	bl	8000718 <HAL_GetTick>
 8001350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001352:	e00a      	b.n	800136a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001354:	f7ff f9e0 	bl	8000718 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001362:	4293      	cmp	r3, r2
 8001364:	d901      	bls.n	800136a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e053      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800136a:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 020c 	and.w	r2, r3, #12
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	429a      	cmp	r2, r3
 800137a:	d1eb      	bne.n	8001354 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d210      	bcs.n	80013ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 0207 	bic.w	r2, r3, #7
 8001392:	4922      	ldr	r1, [pc, #136]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d001      	beq.n	80013ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e032      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d008      	beq.n	80013ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	4916      	ldr	r1, [pc, #88]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d009      	beq.n	80013ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	490e      	ldr	r1, [pc, #56]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013ea:	f000 f821 	bl	8001430 <HAL_RCC_GetSysClockFreq>
 80013ee:	4601      	mov	r1, r0
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	091b      	lsrs	r3, r3, #4
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <HAL_RCC_ClockConfig+0x1c8>)
 80013fc:	5cd3      	ldrb	r3, [r2, r3]
 80013fe:	fa21 f303 	lsr.w	r3, r1, r3
 8001402:	4a09      	ldr	r2, [pc, #36]	; (8001428 <HAL_RCC_ClockConfig+0x1cc>)
 8001404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_RCC_ClockConfig+0x1d0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f942 	bl	8000694 <HAL_InitTick>

  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40022000 	.word	0x40022000
 8001420:	40021000 	.word	0x40021000
 8001424:	08001cd4 	.word	0x08001cd4
 8001428:	20000008 	.word	0x20000008
 800142c:	2000000c 	.word	0x2000000c

08001430 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001430:	b490      	push	{r4, r7}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001436:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001438:	1d3c      	adds	r4, r7, #4
 800143a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800143c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001440:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800145a:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b04      	cmp	r3, #4
 8001468:	d002      	beq.n	8001470 <HAL_RCC_GetSysClockFreq+0x40>
 800146a:	2b08      	cmp	r3, #8
 800146c:	d003      	beq.n	8001476 <HAL_RCC_GetSysClockFreq+0x46>
 800146e:	e02d      	b.n	80014cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001470:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8001472:	623b      	str	r3, [r7, #32]
      break;
 8001474:	e02d      	b.n	80014d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	0c9b      	lsrs	r3, r3, #18
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001482:	4413      	add	r3, r2
 8001484:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001488:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d013      	beq.n	80014bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	0c5b      	lsrs	r3, r3, #17
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014a2:	4413      	add	r3, r2
 80014a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	4a0f      	ldr	r2, [pc, #60]	; (80014ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80014ae:	fb02 f203 	mul.w	r2, r2, r3
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ba:	e004      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	4a0c      	ldr	r2, [pc, #48]	; (80014f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014c0:	fb02 f303 	mul.w	r3, r2, r3
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	623b      	str	r3, [r7, #32]
      break;
 80014ca:	e002      	b.n	80014d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80014ce:	623b      	str	r3, [r7, #32]
      break;
 80014d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014d2:	6a3b      	ldr	r3, [r7, #32]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3728      	adds	r7, #40	; 0x28
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc90      	pop	{r4, r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	08001cc0 	.word	0x08001cc0
 80014e4:	08001cd0 	.word	0x08001cd0
 80014e8:	40021000 	.word	0x40021000
 80014ec:	007a1200 	.word	0x007a1200
 80014f0:	003d0900 	.word	0x003d0900

080014f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014f8:	4b02      	ldr	r3, [pc, #8]	; (8001504 <HAL_RCC_GetHCLKFreq+0x10>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	20000008 	.word	0x20000008

08001508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800150c:	f7ff fff2 	bl	80014f4 <HAL_RCC_GetHCLKFreq>
 8001510:	4601      	mov	r1, r0
 8001512:	4b05      	ldr	r3, [pc, #20]	; (8001528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	0a1b      	lsrs	r3, r3, #8
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	4a03      	ldr	r2, [pc, #12]	; (800152c <HAL_RCC_GetPCLK1Freq+0x24>)
 800151e:	5cd3      	ldrb	r3, [r2, r3]
 8001520:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001524:	4618      	mov	r0, r3
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40021000 	.word	0x40021000
 800152c:	08001ce4 	.word	0x08001ce4

08001530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001534:	f7ff ffde 	bl	80014f4 <HAL_RCC_GetHCLKFreq>
 8001538:	4601      	mov	r1, r0
 800153a:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	0adb      	lsrs	r3, r3, #11
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	4a03      	ldr	r2, [pc, #12]	; (8001554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001546:	5cd3      	ldrb	r3, [r2, r3]
 8001548:	fa21 f303 	lsr.w	r3, r1, r3
}
 800154c:	4618      	mov	r0, r3
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40021000 	.word	0x40021000
 8001554:	08001ce4 	.word	0x08001ce4

08001558 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <RCC_Delay+0x34>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <RCC_Delay+0x38>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	0a5b      	lsrs	r3, r3, #9
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001574:	bf00      	nop
  }
  while (Delay --);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1e5a      	subs	r2, r3, #1
 800157a:	60fa      	str	r2, [r7, #12]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1f9      	bne.n	8001574 <RCC_Delay+0x1c>
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008
 8001590:	10624dd3 	.word	0x10624dd3

08001594 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e03f      	b.n	8001626 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d106      	bne.n	80015c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7fe ff72 	bl	80004a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2224      	movs	r2, #36	; 0x24
 80015c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 fa5f 	bl	8001a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	691a      	ldr	r2, [r3, #16]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	695a      	ldr	r2, [r3, #20]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800160c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2220      	movs	r2, #32
 8001618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2220      	movs	r2, #32
 8001620:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001650:	2300      	movs	r3, #0
 8001652:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10d      	bne.n	8001682 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	f003 0320 	and.w	r3, r3, #32
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_UART_IRQHandler+0x52>
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	f003 0320 	and.w	r3, r3, #32
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f98d 	bl	800199a <UART_Receive_IT>
      return;
 8001680:	e0cc      	b.n	800181c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 80ab 	beq.w	80017e0 <HAL_UART_IRQHandler+0x1b0>
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d105      	bne.n	80016a0 <HAL_UART_IRQHandler+0x70>
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 80a0 	beq.w	80017e0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00a      	beq.n	80016c0 <HAL_UART_IRQHandler+0x90>
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b8:	f043 0201 	orr.w	r2, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00a      	beq.n	80016e0 <HAL_UART_IRQHandler+0xb0>
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d8:	f043 0202 	orr.w	r2, r3, #2
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00a      	beq.n	8001700 <HAL_UART_IRQHandler+0xd0>
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f8:	f043 0204 	orr.w	r2, r3, #4
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00a      	beq.n	8001720 <HAL_UART_IRQHandler+0xf0>
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001718:	f043 0208 	orr.w	r2, r3, #8
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001724:	2b00      	cmp	r3, #0
 8001726:	d078      	beq.n	800181a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f003 0320 	and.w	r3, r3, #32
 800172e:	2b00      	cmp	r3, #0
 8001730:	d007      	beq.n	8001742 <HAL_UART_IRQHandler+0x112>
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	f003 0320 	and.w	r3, r3, #32
 8001738:	2b00      	cmp	r3, #0
 800173a:	d002      	beq.n	8001742 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f92c 	bl	800199a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800174c:	2b00      	cmp	r3, #0
 800174e:	bf14      	ite	ne
 8001750:	2301      	movne	r3, #1
 8001752:	2300      	moveq	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <HAL_UART_IRQHandler+0x13a>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d031      	beq.n	80017ce <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f877 	bl	800185e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800177a:	2b00      	cmp	r3, #0
 800177c:	d023      	beq.n	80017c6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	695a      	ldr	r2, [r3, #20]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800178c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001792:	2b00      	cmp	r3, #0
 8001794:	d013      	beq.n	80017be <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179a:	4a22      	ldr	r2, [pc, #136]	; (8001824 <HAL_UART_IRQHandler+0x1f4>)
 800179c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff f8f2 	bl	800098c <HAL_DMA_Abort_IT>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d016      	beq.n	80017dc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017b8:	4610      	mov	r0, r2
 80017ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017bc:	e00e      	b.n	80017dc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f844 	bl	800184c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017c4:	e00a      	b.n	80017dc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f840 	bl	800184c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017cc:	e006      	b.n	80017dc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f83c 	bl	800184c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80017da:	e01e      	b.n	800181a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017dc:	bf00      	nop
    return;
 80017de:	e01c      	b.n	800181a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d008      	beq.n	80017fc <HAL_UART_IRQHandler+0x1cc>
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f863 	bl	80018c0 <UART_Transmit_IT>
    return;
 80017fa:	e00f      	b.n	800181c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00a      	beq.n	800181c <HAL_UART_IRQHandler+0x1ec>
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f8aa 	bl	800196a <UART_EndTransmit_IT>
    return;
 8001816:	bf00      	nop
 8001818:	e000      	b.n	800181c <HAL_UART_IRQHandler+0x1ec>
    return;
 800181a:	bf00      	nop
  }
}
 800181c:	3720      	adds	r7, #32
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	08001899 	.word	0x08001899

08001828 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001874:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	695a      	ldr	r2, [r3, #20]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0201 	bic.w	r2, r2, #1
 8001884:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2220      	movs	r2, #32
 800188a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f7ff ffca 	bl	800184c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80018b8:	bf00      	nop
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b21      	cmp	r3, #33	; 0x21
 80018d2:	d144      	bne.n	800195e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018dc:	d11a      	bne.n	8001914 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018f2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d105      	bne.n	8001908 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	1c9a      	adds	r2, r3, #2
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	621a      	str	r2, [r3, #32]
 8001906:	e00e      	b.n	8001926 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	621a      	str	r2, [r3, #32]
 8001912:	e008      	b.n	8001926 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	1c59      	adds	r1, r3, #1
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6211      	str	r1, [r2, #32]
 800191e:	781a      	ldrb	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800192a:	b29b      	uxth	r3, r3
 800192c:	3b01      	subs	r3, #1
 800192e:	b29b      	uxth	r3, r3
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	4619      	mov	r1, r3
 8001934:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10f      	bne.n	800195a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001948:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001958:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800195e:	2302      	movs	r3, #2
  }
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr

0800196a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001980:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2220      	movs	r2, #32
 8001986:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ff4c 	bl	8001828 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b22      	cmp	r3, #34	; 0x22
 80019ac:	d171      	bne.n	8001a92 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019b6:	d123      	bne.n	8001a00 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019bc:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10e      	bne.n	80019e4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019dc:	1c9a      	adds	r2, r3, #2
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	629a      	str	r2, [r3, #40]	; 0x28
 80019e2:	e029      	b.n	8001a38 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28
 80019fe:	e01b      	b.n	8001a38 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10a      	bne.n	8001a1e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6858      	ldr	r0, [r3, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	1c59      	adds	r1, r3, #1
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6291      	str	r1, [r2, #40]	; 0x28
 8001a18:	b2c2      	uxtb	r2, r0
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	e00c      	b.n	8001a38 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	1c58      	adds	r0, r3, #1
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	6288      	str	r0, [r1, #40]	; 0x28
 8001a30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	4619      	mov	r1, r3
 8001a46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d120      	bne.n	8001a8e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0220 	bic.w	r2, r2, #32
 8001a5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0201 	bic.w	r2, r2, #1
 8001a7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff fed8 	bl	800183a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e002      	b.n	8001a94 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001a92:	2302      	movs	r3, #2
  }
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001ad6:	f023 030c 	bic.w	r3, r3, #12
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	68f9      	ldr	r1, [r7, #12]
 8001ae0:	430b      	orrs	r3, r1
 8001ae2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699a      	ldr	r2, [r3, #24]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a52      	ldr	r2, [pc, #328]	; (8001c48 <UART_SetConfig+0x1ac>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d14e      	bne.n	8001ba2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001b04:	f7ff fd14 	bl	8001530 <HAL_RCC_GetPCLK2Freq>
 8001b08:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	009a      	lsls	r2, r3, #2
 8001b14:	441a      	add	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b20:	4a4a      	ldr	r2, [pc, #296]	; (8001c4c <UART_SetConfig+0x1b0>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	0119      	lsls	r1, r3, #4
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	009a      	lsls	r2, r3, #2
 8001b34:	441a      	add	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b40:	4b42      	ldr	r3, [pc, #264]	; (8001c4c <UART_SetConfig+0x1b0>)
 8001b42:	fba3 0302 	umull	r0, r3, r3, r2
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	2064      	movs	r0, #100	; 0x64
 8001b4a:	fb00 f303 	mul.w	r3, r0, r3
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	3332      	adds	r3, #50	; 0x32
 8001b54:	4a3d      	ldr	r2, [pc, #244]	; (8001c4c <UART_SetConfig+0x1b0>)
 8001b56:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b60:	4419      	add	r1, r3
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	009a      	lsls	r2, r3, #2
 8001b6c:	441a      	add	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b78:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <UART_SetConfig+0x1b0>)
 8001b7a:	fba3 0302 	umull	r0, r3, r3, r2
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	2064      	movs	r0, #100	; 0x64
 8001b82:	fb00 f303 	mul.w	r3, r0, r3
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	011b      	lsls	r3, r3, #4
 8001b8a:	3332      	adds	r3, #50	; 0x32
 8001b8c:	4a2f      	ldr	r2, [pc, #188]	; (8001c4c <UART_SetConfig+0x1b0>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	f003 020f 	and.w	r2, r3, #15
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	440a      	add	r2, r1
 8001b9e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001ba0:	e04d      	b.n	8001c3e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ba2:	f7ff fcb1 	bl	8001508 <HAL_RCC_GetPCLK1Freq>
 8001ba6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	009a      	lsls	r2, r3, #2
 8001bb2:	441a      	add	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbe:	4a23      	ldr	r2, [pc, #140]	; (8001c4c <UART_SetConfig+0x1b0>)
 8001bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc4:	095b      	lsrs	r3, r3, #5
 8001bc6:	0119      	lsls	r1, r3, #4
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	009a      	lsls	r2, r3, #2
 8001bd2:	441a      	add	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <UART_SetConfig+0x1b0>)
 8001be0:	fba3 0302 	umull	r0, r3, r3, r2
 8001be4:	095b      	lsrs	r3, r3, #5
 8001be6:	2064      	movs	r0, #100	; 0x64
 8001be8:	fb00 f303 	mul.w	r3, r0, r3
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	3332      	adds	r3, #50	; 0x32
 8001bf2:	4a16      	ldr	r2, [pc, #88]	; (8001c4c <UART_SetConfig+0x1b0>)
 8001bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf8:	095b      	lsrs	r3, r3, #5
 8001bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bfe:	4419      	add	r1, r3
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	009a      	lsls	r2, r3, #2
 8001c0a:	441a      	add	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <UART_SetConfig+0x1b0>)
 8001c18:	fba3 0302 	umull	r0, r3, r3, r2
 8001c1c:	095b      	lsrs	r3, r3, #5
 8001c1e:	2064      	movs	r0, #100	; 0x64
 8001c20:	fb00 f303 	mul.w	r3, r0, r3
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	3332      	adds	r3, #50	; 0x32
 8001c2a:	4a08      	ldr	r2, [pc, #32]	; (8001c4c <UART_SetConfig+0x1b0>)
 8001c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c30:	095b      	lsrs	r3, r3, #5
 8001c32:	f003 020f 	and.w	r2, r3, #15
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	440a      	add	r2, r1
 8001c3c:	609a      	str	r2, [r3, #8]
}
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40013800 	.word	0x40013800
 8001c4c:	51eb851f 	.word	0x51eb851f

08001c50 <__libc_init_array>:
 8001c50:	b570      	push	{r4, r5, r6, lr}
 8001c52:	2500      	movs	r5, #0
 8001c54:	4e0c      	ldr	r6, [pc, #48]	; (8001c88 <__libc_init_array+0x38>)
 8001c56:	4c0d      	ldr	r4, [pc, #52]	; (8001c8c <__libc_init_array+0x3c>)
 8001c58:	1ba4      	subs	r4, r4, r6
 8001c5a:	10a4      	asrs	r4, r4, #2
 8001c5c:	42a5      	cmp	r5, r4
 8001c5e:	d109      	bne.n	8001c74 <__libc_init_array+0x24>
 8001c60:	f000 f822 	bl	8001ca8 <_init>
 8001c64:	2500      	movs	r5, #0
 8001c66:	4e0a      	ldr	r6, [pc, #40]	; (8001c90 <__libc_init_array+0x40>)
 8001c68:	4c0a      	ldr	r4, [pc, #40]	; (8001c94 <__libc_init_array+0x44>)
 8001c6a:	1ba4      	subs	r4, r4, r6
 8001c6c:	10a4      	asrs	r4, r4, #2
 8001c6e:	42a5      	cmp	r5, r4
 8001c70:	d105      	bne.n	8001c7e <__libc_init_array+0x2e>
 8001c72:	bd70      	pop	{r4, r5, r6, pc}
 8001c74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c78:	4798      	blx	r3
 8001c7a:	3501      	adds	r5, #1
 8001c7c:	e7ee      	b.n	8001c5c <__libc_init_array+0xc>
 8001c7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c82:	4798      	blx	r3
 8001c84:	3501      	adds	r5, #1
 8001c86:	e7f2      	b.n	8001c6e <__libc_init_array+0x1e>
 8001c88:	08001cec 	.word	0x08001cec
 8001c8c:	08001cec 	.word	0x08001cec
 8001c90:	08001cec 	.word	0x08001cec
 8001c94:	08001cf0 	.word	0x08001cf0

08001c98 <memset>:
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4402      	add	r2, r0
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d100      	bne.n	8001ca2 <memset+0xa>
 8001ca0:	4770      	bx	lr
 8001ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ca6:	e7f9      	b.n	8001c9c <memset+0x4>

08001ca8 <_init>:
 8001ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001caa:	bf00      	nop
 8001cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cae:	bc08      	pop	{r3}
 8001cb0:	469e      	mov	lr, r3
 8001cb2:	4770      	bx	lr

08001cb4 <_fini>:
 8001cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb6:	bf00      	nop
 8001cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cba:	bc08      	pop	{r3}
 8001cbc:	469e      	mov	lr, r3
 8001cbe:	4770      	bx	lr
